server.port = 8080


#server.http2.enabled=true
#server.port=8443
#server.ssl.enabled=true
#server.ssl.key-store=J:/balancer/src/main/resources/local_store.p12
#server.ssl.key-store-password=secret
#server.ssl.key-password=secret
#server.ssl.keyAlias=local_ssl
#server.ssl.keyStoreType=PKCS12
#
#
#jdk.internal.httpclient.disableHostnameVerification = true
#etty.sslContext.sniRequired=false 
#jetty.ssl.sniHostCheck=false 
#jetty.ssl.sniRequired=false

#javax.net.ssl.trustStore = J:/balancer/src/main/resources/local_store.p12
#com.sun.security.enableAIAcaIssuers=true
#javax.net.ssl.trustStoreType = jks
#javax.net.ssl.trustStore = J:/balancer/src/main/resources/keystorebal2.jks
#javax.net.ssl.trustStorePassword = secret

#javax.net.ssl.trustStore = C:/Program Files/Java/jdk-17/lib/security/cacerts
#com.sun.security.enableAIAcaIssuers=true
#javax.net.ssl.trustStoreType = jks
#javax.net.ssl.trustStore = J:/balancer/src/main/resources/keystore.jks 
#javax.net.ssl.trustStorePassword = secret

# To generate file
# keytool -genkey -alias balancerkeyname -keyalg RSA -keysize 2048 -keystore keystorebal2.jks
# To generate crt file
# keytool -export -keystore keystorebal2.jks -alias balancerkeyname -file local_cert_bal2.crt
# To import cert to keystore and use it in HTTPS API calls
# keytool -importcert -file J:\balancer\src\main\resources\local_cert_bal2.crt -alias balancerkeyname -keystore "C:\Program Files\Java\jdk-17\lib\security\cacerts"
# Default password is 'changeit'